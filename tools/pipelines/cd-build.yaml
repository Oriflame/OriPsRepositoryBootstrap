# CD build for OriPsRepositoryBootstrap
# it should run Pester to unit test bootstrap
# it should deploy to devops artifacts if pushpackage = true
# TBD: call template from /devops
#

trigger:
    paths:
      exclude:
      - 'tools/*'
      - 'docs/*'
    branches:
      include:
      - master
      - develop
      - release/*

jobs:

- job: Publish_to_PsGallery
  displayName: Publish to PsGallery

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: GitVersion@5
    displayName: 'GitVersion'
    inputs:
      runtime: 'core'
    
  - task: PowerShell@2
    name: update_build_version
    displayName: Update Build Version
    inputs:
      targetType: 'inline'
      script: |
        [bool]$isPrerelease = '$(GitVersion.NuGetPreReleaseTag)' -ne '';
        if ($isPrerelease)
        {
            $version = '$(GitVersion.SemVer)-$(Build.BuildId)'
        }else
        {
            $version = '$(GitVersion.SemVer)'
        }
        Write-Output "##vso[task.setvariable variable=Version]$version"
        Write-Output "##vso[build.updatebuildnumber]$version"
      pwsh: true
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  
  - task: PowerShell@2
    name: update_manifest
    displayName: Update PS Manifest
    inputs:
      targetType: 'inline'
      script: |
        Update-ModuleManifest -Path $(Build.ArtifactStagingDirectory)\src\$(Build.Repository.Name).psd1 -ModuleVersion '$(Version)'
      pwsh: true
      workingDirectory: '$(System.DefaultWorkingDirectory)'
  
  - task: PowerShell@2
    name: publish_module_pwsh
    displayName: Publish module (PsGallery)
    inputs:
      targetType: 'inline'
      script: |
        Publish-Module -Name OriPsRepositoryBootstrap -NuGetApiKey $env:PSGALLERYAPIKEY
      pwsh: true
      workingDirectory: '$(System.DefaultWorkingDirectory)'
